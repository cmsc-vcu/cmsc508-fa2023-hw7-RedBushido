---
title: Homework 7 - Creating a resume database
author: Christ Le
date: 11/12/23
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

The Document is an overview of a Database "User" created for the purpose of
completing HW7 for CMSC508

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-RedBushido>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description
This project is a project designed to createa resume database in which manages information regarding people about thier skills and roles. The database schema
includes tables for people, skill and roles, aswell as relationship between all
of them.

## Crows-foot diagram

The Following Crows-Foot diagram displays the relationship of tables within the
Resume Database. In which is displays entities, such as people, skills, and roles
and their relationship with one another.

```{mermaid}
%%| echo: false
erDiagram
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
    CUSTOMER{
        int id
        string first_name
        string last_name
    }
    DELIVERY-ADDRESS {
        int id
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql_skills = f"""
SELECT * FROM skills;
"""
try:
    df_skills = pd.read_sql(sql_skills, cnx)
    df_skills
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df_skills = pd.DataFrame()
df_skills
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql_skills = f"""
SELECT * FROM skills;
"""
try:
    df_skills = pd.read_sql(sql_skills, cnx)
    df_skills
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df_skills = pd.DataFrame()
df_skills
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select 
skills_name,
skills_tag,
skills_description
from skills
order by skills_name
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
sql = f"""
select 
people_first_name,
people_last_name,
people_email
from people
order by people_last_name
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List skill names of Person 1
```{python}
person1_info = f"""
SELECT s.skills_name
FROM skills s
JOIN peopleskills ps ON s.skills_id = ps.skills_id
JOIN people p ON p.people_id = ps.people_id
WHERE p.people_id = 1;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(person1_info,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6
```{python}
sql_skill6_names = f"""
SELECT p.people_first_name, p.people_last_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON s.skills_id = ps.skills_id
WHERE s.skills_id = 6;
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql_skill6_names,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role
```{python}
sql_skill_developers = f"""
SELECT p.people_first_name, p.people_last_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON r.id = pr.role_id
WHERE r.name = 'Developer';
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql_skill_developers,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills
```{python}
sql_skills_noskills = f"""
SELECT p.people_first_name, p.people_last_name, p.people_email
FROM people p
LEFT JOIN peopleskills ps ON p.people_id = ps.people_id
WHERE ps.id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql_skills_noskills,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills
```{python}
sql_skill_unused = f"""
SELECT s.skills_name, s.skills_tag
FROM skills s
LEFT JOIN peopleskills ps ON s.skills_id = ps.skills_id
WHERE ps.skills_id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql_skill_unused,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role
```{python}
sql_skill_boss = f"""
SELECT p.people_first_name, p.people_last_name, s.skills_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON r.id = pr.role_id
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON s.skills_id = ps.skills_id
WHERE r.name = 'Boss';
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql_skill_boss,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles
```{python}
sql_skill_unusedroles = f"""
SELECT r.id, r.name
FROM roles r
LEFT JOIN peopleroles pr ON r.id = pr.role_id
WHERE pr.id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql_skill_unusedroles,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

The project was overall enjoyable other than some hiccups along the ways of not
completely understanding sme of the the directions that was states, such as how
to execute selected queries. However overall I believe this project help me learn
and demonstrate how to create a database, through the creation of tables and
insertion of information into tables aswell as how to create SQL connections.